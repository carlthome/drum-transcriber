function [hNew,hGen]=testGMM%test of GMM training%allowing full covariance matrices%Arne Leijon 2009-07-21 testedc='rbgk';%state color coding, max 4 states%make a fairly tricky Gaussmix distribution%Here the VQ initialization sometimes finds wrong clusters!pDgen(1)=GaussD('Mean',[-3 -1],'StDev',[1 3]);pDgen(2)=GaussD('Mean',[+3 1],'StDev',[1 3]);pDgen(3)=GaussD('Mean',[-1 -3],'StDev',[3 1]);pDgen(4)=GaussD('Mean',[1 +3],'StDev',[3 1]);hGen=GaussMixD(pDgen,[1 1 1 1]);%Make a big training data sequence:[xTraining,sT]=rand(hGen,3000);%training datag=GaussD('Mean',[0 0],'Covariance',eye(2));%allowing full cov matrixgg=GaussMixD(repmat(g,2,1));%single GaussMixD with two componentshNew=init(repmat(gg,2,1),xTraining);%2 GMM, 2 GaussD eachfor nTraining=1:15    figure;    plotTraining(xTraining,sT,c);    hold on;    %also plot error points, as classified by viterbi...    for i=1:length(hNew);        plotCross(hNew(i).Gaussians,[1 2],c(i));        hold on;    end; 	axis([-10 10 -10 10]);	hold off;%	pause;    %one training step:    aS=adaptStart(hNew);        aS=adaptAccum(hNew,aS,xTraining);    hNew=adaptSet(hNew,aS);end;function plotTraining(xT,sT,c)nStates=max(sT);for s=1:nStates    plot(xT(1,sT==s),xT(2,sT==s),['o',c(s)],'MarkerSize',1.5);    hold on;end;