function [hNew]=testErgodicHMMGamma1%test of HMM with high-dimensional Gamma output distributions%with a wide range of data scale values%Arne Leijon 2011-05-27 testedc='rbgk';%state color coding, max 4 statesnStates=2;dSize=100;%obs.vector sizenStateDuration=10;nTraining=2000;%number of training vectorsnPeriods=round(0.5*nTraining/nStateDuration);%ergodic generator HMM:% nStates=2;% A=[.95 .05; .05 .95];% p0=[0.5;0.5];% nStates=3;% A=[.95 .03 .02; .03 .95 .02;.03 0.02 0.95];% p0=[1;1;1];%mc=MarkovChain(p0,A);%generate Gaussian data, then make square sum to get gamma-distributed powerspDgen(1)=GaussD('Mean',zeros(dSize,1),'StDev',(1:dSize)');pDgen(2)=GaussD('Mean',zeros(dSize,1),'StDev',(dSize:-1:1)');%pDgen(3)=GaussD('Mean',[-1 0],'StDev',[1 3]);%hGen=HMM(mc,pDgen);%Make TWO long periodic training data sequence:xTraining=zeros(dSize,0);%training datalxT=[];%lengths of sub-sequencessT=[];%generator statesfor iPeriod=1:nPeriods    x1=(pDgen(1).rand(nStateDuration)).^2+(pDgen(1).rand(nStateDuration)).^2;    x2=(pDgen(2).rand(nStateDuration)).^2+(pDgen(2).rand(nStateDuration)).^2;    xTraining=[xTraining,x1,x2];    sT=[sT,ones(1,nStateDuration),2*ones(1,nStateDuration)];end;g=GammaD;g.Shape=1;g.fixedShape=true;hNew=InitErgodicHMM(nStates,[],g,xTraining);for nTraining=1:5    figure;    plotTraining(xTraining,sT,c);    ax=axis;    %also plot error points, as classified by viterbi...    plotCross(hNew.OutputDistr,[1 dSize],c,'log');	hold off; 	axis(ax);%	pause;    %one training step:%    ixT=cumsum([1,lxT]);%start index for each sub-sequence    aS=adaptStart(hNew);%     for r=1:length(lxT)%         aS=adaptAccum(hNew,aS,xTraining(:,ixT(r):(ixT(r+1)-1)));%     end;    aS=adaptAccum(hNew,aS,xTraining);    hNew=adaptSet(hNew,aS);end;figure;%plot HMM state meansfor n=1:nStates    semilogy(hNew.OutputDistr(n).Mean,['-',c(n)]);hold on;end;hold off;hNew=setStationary(hNew);disp('HMM logprob=');disp(hNew.logprob(xTraining));[p,lS]=hNew.OutputDistr.prob(xTraining);disp('Training prob=');disp(p(:,1:20));disp('Log Scale=');disp(lS(1:20));function plotTraining(xT,sT,c)%2D loglog plot of xT([1,end],:)nStates=max(sT);for s=1:nStates    loglog(xT(1,sT==s),xT(end,sT==s),['o',c(s)],'MarkerSize',1.5);    hold on;end;