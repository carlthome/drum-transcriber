%hmm=MakeErgodicHMM(nStates,stateDuration,pD,obsData,lData);%Create, initialize and train a Hidden Markov Model (a HMM object)%in a simple standardized way,%to conform with a given set of training data sequences.%%The HMM has infinite duration with ergodic structure allowing transitions%from every state to any other state.%%Input:%nStates=   desired number of HMM states%stateDuration= average number of consecutive samples in each state%           (may be left empty if unknown)%pD=        a single object of some probability-distribution class%obsData=   matrix with concatenated finite-duration training sequences.%           Observed vector samples are stored column-wise.%lData=     (optional) vector with lengths of training sub-sequences.%lData(r)=  length of r:th training sequence.%           sum(lData) == size(obsData,2)%%Result:%hmm=       the resulting Hidden Markov Model object%%Arne Leijon 2004-11-23 tested%            2011-08-04 minor fix to use HMM/initfunction hmm=MakeErgodicHMM(nStates,stateDuration,pD,obsData,lData)if nargin<5%default is just one single sequence    lData=size(obsData,2);end;mc=initErgodic(MarkovChain,nStates,stateDuration);hmm=init(HMM(mc,pD),obsData,lData);%hmm=InitErgodicHMM(nStates,stateDuration,pD,obsData,lData);hmm=train(hmm,obsData,lData,5,log(1.01));%standard traininghmm=setStationary(hmm);%make it stationary, regardless of training data