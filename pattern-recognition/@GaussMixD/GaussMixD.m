classdef GaussMixD < ProbDistr%GaussMixD - represents Random Scalar or Vector Variable,%distributed as a Mixture of Gaussian Probability distributions,%each defined by a GaussD object.%%A Gaussian mixture can be used to approximate any probability distribution.%%A GaussMixD object can represent random vectors with any form of %statistical dependence between vector elements, even if each of its%GaussD components does NOT allow correlated vector elements.%%Several GaussMixD objects may be collected in a multidimensional array,%           even if they do not have the same DataSize.%%Arne Leijon, 2008-08-18 tested%           2011-05-25, using generalized prob method from superclass    properties (Access=public)        Gaussians=GaussD;%  vector with the mixed GaussD objects.        MixWeight=1;%       vector with weight factors for prob.density mix    end    properties (Dependent,Access=public)        DataSize;%  size of data vectors        Mean;%      total mean        Covariance;%total covariance matrix        %UserData   any data structure,        %    end    methods (Access=public)        %***** Constructor method:        function pD = GaussMixD(varargin)        %***Usage:        %pD=GaussMixD;        %   creates a single standard object.        %pD=GaussMixD(N);        %   creates a GaussMixD object with N GaussD standard components.        %pD=GaussMixD(gaussians);        %   creates a GaussMixD object from array gaussians, with GaussD elements.        %pD=GaussMixD(gaussians,weight); OR        %pD=GaussMixD(weight,gaussians);         %   creates a GaussMixD object from array gaussians,        %   mixed with array weights. (Lengths must match.)        %pD=GaussMixD(propertyName1,Value1,propertyName2,Value2)        %creates a GaussMixD from named properties; backward compatibility.        %             switch nargin            case 0%default trivial single-component GMM            case 1                arg1=varargin{1};                if isa(arg1,'GaussMixD')                    pD= arg1;%just Copy it                elseif isa(arg1,'GaussD')                    pD.Gaussians = arg1(:);%column vector                    pD.MixWeight = ones(length(pD.Gaussians),1);%column vector, equal weights                 else%it should be numeric length of desired GaussD array                    pD.Gaussians=repmat(GaussD,arg1,1);%Clone trivial GaussD to right length                    pD.MixWeight = ones(length(pD.Gaussians),1);%column vector                end            case 2  %must be a GaussD array and a weight vector                 arg1=varargin{1};                arg2=varargin{2};                if isa(arg1,'GaussD')%                    pD.Gaussians = arg1(:);%column vector                    pD.MixWeight = arg2(:);                else%*** reverse argument order                    pD.Gaussians = arg2(:);%column vector                    pD.MixWeight = arg1(:);                end;                if length(pD.Gaussians) ~= length(pD.MixWeight)                    error('Incompatible array lengths');                end;            otherwise                pD=setNamedProperties(pD,varargin{:});%for backward compatibility            end;        end        %        %***** Methods for general use:        [X,S]=rand(pD,nSamples);%   generate random vector samples        %[f,logS]=prob(pD,x);%       probability densities for observed vector samples        logP=logprob(pD,x);%        log(probability densities) for observed vector samples        plotH=plotCross(pD,proj,colors);%   plot indicators of each mixed GaussD sub-object        %****plotProb  3D plot of probability density function???)        %        %***** Training Methods:        pD=init(pD,x);%     initialize crudely to conform with given data        [gm,logprobs]=train(gm,xT,nIterations,minStep);%   standard training procedure        %        %* Low-level training methods:        %These methods can be used also to adapt several GaussMixD objects,        %automatically assigning training vectors to different objects,        %if no external obsWeight is given in call to adaptAccum.        %        aState=adaptStart(pD);%     initialize accumulator data structure for data statistics        aState=adaptAccum(pD,aState,obsData,obsWeight);        %           collect sufficient statistics from observed data vectors,        %           without changing the object itself        %           (may be called repeatedly with different data subsets).        pD=adaptSet(pD,aState);%    finally adjust the object using accumulated statistics.           %    end    methods% get/set methods        function D=get.DataSize(pD)            %D= vector with D(i)=pD(i).DataSize            D=zeros(size(pD));%may be unequal in different GaussMixD objects            for i=1:numel(pD)%but equal within the Gaussians of each GaussMixD object                D(i)=pD(i).Gaussians.DataSize;            end;        end        function M=get.Mean(pD)            mk=zeros(pD.DataSize,length(pD.Gaussians));            for k=1:length(pD.Gaussians)                mk(:,k)=pD.Gaussians(k).Mean;%store in matrix columns            end;            M=mk*pD.MixWeight;%weighted overall mean vector        end        function C=get.Covariance(pD)            M=pD.Mean;%grand overall mean            C=zeros(pD.DataSize);%square matrix            for k=1:length(pD.Gaussians)%all components                mk=pD.Gaussians(k).Mean-M;%component deviation from grand mean                C=C+pD.MixWeight(k).*(pD.Gaussians(k).Covariance+mk*mk');            end;        end        function pD=set.Gaussians(pD,gg)%check type and DataSize            if ~isa(gg,'GaussD')                error('Gaussians must be a GaussD array');            end            if ~equalDataSize(gg)                error('All mixed GaussD components must have same DataSize');            end;            pD.Gaussians=gg;%all seems OK            function ok=equalDataSize(gD)                ds=gD.DataSize;%for all objects                ok=all(ds==ds(1));            end        end        function pD=set.MixWeight(pD,w)            pD.MixWeight=w./sum(w);%normalize        end    end    methods (Access=private)         function pD=setNamedProperties(pD,varargin)%for backward compatibility         %set named property value         %several (propName,value) pairs may follow.            property_argin = varargin;            while length(property_argin) >= 2,                propName = property_argin{1};                v = property_argin{2};                property_argin = property_argin(3:end);                switch propName                    case {'MixWeight'}% for backward compatibility                        pD.MixWeight=v(:);                    case 'Gaussians'                        pD.Gaussians=v(:);                    otherwise                        error(['Cannot set property ',propName,' of this object']);                end;            end;        end    endend